#include <bits/stdc++.h>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#define phuck() ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define append(x) push_back(x)
#define vint vector<int>
#define vstr vector<string>
#define vll vector<long long int>
#define vull vector<unsigned long long int>
#define vd vector<double> //dont use this
#define vchar vector<char>
#define pop pop_back
typedef long long int ll;
typedef unsigned long long int ull;
typedef float ff;
#define str to_string
#define mii map<int, int>
#define divc(x, y) (x+y-1)/y;
#define mll map<long long int, long long int>
#define mis map<int, string>
#define pii pair<int, int>
#define pis pair<int, string>
#define sint set<int>
#define sll set<ll>
typedef double dd;
using namespace std;
#define all(v) v.begin(),v.end()
#define makeitset(n, i) n=n|(1<<i);
#define stu(s) std::transform(str.begin(), str.end(), str.begin(), ::toupper);
#define eb emplace_back
#define ii(n) int n; cin >> n;
#define li(m) ll m; cin >> m;
#define ui(m) ull m; cin >> m;
#define fi(f) ff f; cin >> f;
#define si(s) string s; cin >> s;
#define vll_input(n, v)  li(n) vll v(n); for(auto &val:v)cin >> val;
#define vint_input(n, v) ii(n) vint v(n); for(auto &val : v)cin >> val;
#define vint_inputc(n, v) vint v(n); for(int i=0; i<n; i++){cin >> v[i];}
#define printmap(mapp) for(auto &pr : mapp){cout << pr.first <<' ' << pr.second<<endl;}cout<<endl;
#define printmapinrev(mymap)for (auto it = mymap.rbegin(); it != mymap.rend(); it++) {cout << it->first << ' ' << it->second <<endl;} cout<<endl;
#define printv(vectorr) for(auto &pr : vectorr){cout << pr <<' ';}cout<<endl;
int findpos(vector<char> /*here*/v, char K/*and */){auto it = find(v.begin(), v.end(), K);
    if (it != v.end()){int index = it - v.begin();return index;}else {return -1;}}
int findkey(map<int, int> m, int k){auto it = m.find(k);
    if (it != m.end()){return (*it).first;}else {return -1;}}
int gcd(ll a, ll b) {if (b > a) {return gcd(b, a);}
    if (b == 0) {return a;} return gcd(b, a % b);}
int lcm(ll a,ll b){return (a*b)/gcd(a,b);}
int powmod(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod;
    a = (a * a) % mod; b = b >> 1;} return res;}
bool iseven(ll n){if (n&1)return false; return true;}
bool powerof2(ll n){return !(n&n-1); return 0;}
bool isset(ll n, int i){return (n & (1<<i));}
ll factorialmod(int n, int p){if (n >= p)return 0; ll result = 1;for (int i = 1; i <= n; i++){result = (result * i) % p;}return result;}
vector<ll> primefactor(ll n){vector<ll>ret;while (n % 2 == 0){ret.append(2);n = n/2;}for (ll i = 3; i <= sqrt(n); i = i + 2){while (n % i == 0){ret.append(i);n = n/i;}}if (n > 2){ret.append(n);}return ret;}
bool ifprime(ll n){vll v = primefactor(n); if (v.size() == 1) return true; else return false;}
ll countDivisors(ll n){ll cnt = 0;for (ll i = 1; i <= sqrt(n); i++) {if (n % i == 0) {if (n / i == i)cnt++;else cnt = cnt + 2;}}return cnt;}
inline ll power(int a, int b){ll x = 1;while (b){if (b & 1) x *= a;a *= a;b >>= 1;}return x;}
vint sieve(int N){vector<bool> isPrime(N,1);vint vprime;isPrime[0]=isPrime[1]=false;for(int i=2;i<N;i++){if(isPrime[i]){vprime.append(i); for(int j=i*i;j<=N;j+=i){isPrime[j]=false;}}}return vprime;}
vector<ll>divisor(ll n){vector<ll>res;for (ll i=1; i<=sqrt(n); i++){if (n%i == 0){if (n/i == i)res.append(i); else{res.append(i);res.append(n/i);} }}return res;}
bool sortcol(const vector<int>& v1, const vector<int>& v2) //sorting vector of vectors columnwise and use this in sort(vv.begin(), vv.end(), sortcol);
{return (v1[0] < v2[0]);}//0 is used because we want to sort on the basis of first column (i.e. on basis of 1st element of insider vector) you can use 1 or 2...}
ll power(ll x,ll y){ll res=1;while(y>0){if(y&1)res = res * x;y = y >> 1;x = x * x;}return res;}
bool issquare(ll n){ll x=sqrt(n); if(x*x==n){return true;} else{return false;}}
string dustbin(ll num){string str;while(num){if(num & 1) str+='1';else str+='0';num>>=1; } return str;}
ll highestPowerof2(ll x){x |= x >> 1; x |= x >> 2; x |= x >> 4; x |= x >> 8; x |= x >> 16;return x ^ (x >> 1);}

bool startsWith( const std::string &t, const std::string &s ){return strncmp( s.c_str(), t.c_str(), t.size() ) == 0;} //if s starts with t
int maxDist(string S){int l=INT_MIN;vector<int> indices;for(int i=0; i<S.size();i++)if(S[i]=='1')indices.push_back(i);for(int i = 1; i < indices.size(); i++)l=max(l, indices[i]-indices[i-1]);return l==INT_MIN?-1:l;}
int mex(vector<int>v,int n){unordered_set<int>s;for(int i=1;i<n+3;i++)s.insert(i);for(auto val:v)if(s.find(val)!=s.end())s.erase(val);return *min_element(s.begin(), s.end());}
const int N=1e5+10;
int v[N];
int n, cows;
bool canplacecows(int mind){
    int lastpos=-1;
    int cows_ct=cows;
    for(int i=0; i<n; i++){
        if (v[i]-lastpos>=mind){
            cows_ct--;
            lastpos=v[i];
        }
        if (cows_ct == 0) break;
    }
    return cows_ct==0;
}
int main()
{
    
    return 0;
}

