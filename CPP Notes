 cd "a:\C Programming\cpp\" ; if ($?) { g++ main.cpp -o main } ; if ($?) { .\main }

// always use set.find(), instead of set.count or unordered_set in codeforces as it gives tle

#include <bits/stdc++.h>
vector<string> v; lets say name of vector is v
v.push_back(<data>);
v.pop_back()

eshf_624e46ea223d11649297130

//template : Always use this in C++
#include <bits/stdc++.h>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#define phuck() ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define append push_back
#define vint vector<int>
#define vstr vector<string>
#define vll vector<long long int>
#define vd vector<double> //dont use this
#define vchar vector<char>
#define pop pop_back
typedef long long int ll;
typedef unsigned long long int ull;
typedef float ff;
#define str to_string
#define mii map<int, int>
#define mll map<long long int, long long int>
#define mis map<int, string>
#define pii pair<int, int>
#define pis pair<int, string>
typedef double dd;

#define printa(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< " "; cout << endl
using namespace std;
#define int_input(n) int n; cin >> n;
#define ll_input(m) ll m; cin >> m;
#define ff_input(f) ff f; cin >> f;
#define str_input(s) string s; cin >> s;
#define vll_input(n, v) vll v; ll_input(n); ll x; for(ll i=0; i<n; i++){cin >> x; v.append(x)}
#define vint_input(n, v) vint v; int_input(n); int x; for(int i=0; i<n; i++){cin >> x; v.append(x)}
#define printmap(mapp) for(auto &pr : mapp){cout << pr.first <<' ' << pr.second<<endl;}cout<<endl;
#define printv(vectorr) for(auto &pr : vectorr){cout << pr <<' ';}cout<<endl;

int findpos(vector<char> /*here*/v, char K/*and */){auto it = find(v.begin(), v.end(), K);
	if (it != v.end()){int index = it - v.begin();return index;}else {return -1;}}
int findkey(map<int, int> m, int k){auto it = m.find(k);
	if (it != m.end()){return (*it).first;}else {return -1;}}
int gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} 
	if (b == 0) {return a;} return gcd(b, a % b);}
int powmod(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; 
	a = (a * a) % mod; b = b >> 1;} return res;}
int lcm(ll a,ll b){return (a*b)/gcd(a,b);}
vector<ll> primefactor(ll n){vector<ll>ret;while (n % 2 == 0){ret.append(2);n = n/2;}for (ll i = 3; i <= sqrt(n); i = i + 2){while (n % i == 0){ret.append(i);n = n/i;}}if (n > 2){ret.append(n);}return ret;}
bool ifprime(ll n){vll v = primefactor(n); if (v.size() == 1) return true; else return false;}
ll countDivisors(ll n){ll cnt = 0;for (ll i = 1; i <= sqrt(n); i++) {if (n % i == 0) {if (n / i == i)cnt++;else cnt = cnt + 2;}}return cnt;}
vector<ll>divisor(ll n){vector<ll>res;for (ll i=1; i<=sqrt(n); i++){if (n%i == 0){if (n/i == i)res.append(i);else{res.append(i);res.append(n/i);} }}return res;}
inline ll power(int a, int b){ll x = 1;while (b){if (b & 1) x *= a;a *= a;b >>= 1;}return x;}
bool sortcol(const vector<int>& v1, const vector<int>& v2) //sorting vector of vectors columnwise and use this in sort(vv.begin(), vv.end(), sortcol);
{return (v1[0] < v2[0]);} //0 is used because we want to sort on the basis of first column (i.e. on basis of 1st element of insider vector) you can use 1 or 2...
vint countcharinstring(string s, char chr){vector<int> v;for (int i = 0; i < s.size(); i++){if (s[i] == chr){int cnt = 1;
for (int j=i+1 ; j<s.size() ; j++){if (s[j] != chr){ i = j; break;}else {cnt++; i=j;}}v.append(cnt);}}return v;}

ll greatestnsumlessthanx(ll x){
    ll hi=1e9, lo=1, mid;
            while(hi-lo > 1){
            mid=(lo+hi)/2;
            if (mi(mid, x)) lo=mid;
            else hi=mid-1;
        }
        ll ans;
        if (mi(lo, x)) ans=lo;
        else ans=hi;
        x -= (ans*(ans+1))/2;
        if (x>0){
            while(x>0 and ans<k){
                ans++;
                x-=ans;
            }
        }
        return ans;
}

int main()
{
	phuck();
	int t;
	cin >> t;
	while (t--)
	{
		
	}
	return 0;
}

                                                  ----------------------
                                                 |string and its syntax:|
                                                  ----------------------

string functions in C++ are
(1) <string name>.erase(index, 1) //to remove a char at first occurence
    <string name>.erase(firstindex, lastindex)
(2) Concatanation like s3 = s1+s2 works here.
(3) <string name>.size() or <string name>.length() //similar to len in py.
(4) <string name>.find(<stringtobesearched>) //if found then give index if not then -1 similar to py. (always first make an integer variable to store the index and apply anywhere)
(5) reverse(<string name>.begin(), <string name>.end()); (#include <algorithm>) //will reverse the string just if you call the function.
(6) <string name>.append(str1) //just like Lst.append(str1) in py.
(7) <string name>.replace(pos,len,str) 
 //str : str is a string object, whose value to be copied in another string object.
//pos : pos defines the position, whose character to be replaced.
//len : Number of characters to be replaced by another string object.
(8)string str = to_string(n);  #in template use str()                    //will convert integer to string
(9)int y = stoi(str);                                                   //will convert string to integer
(10) int y = stoi(<binary code in string>, 0, 2)                        //will convert binary to decimal or integer
(11) s.erase(remove(s.begin(), s.end(), 'char to be removed'), s.end()); to remove all occurences of char from string s
(12) sort(s.begin(), s.end());                                         //will sort string s
(13) string s1 = s.substr(3, 2);                                      //will give substring from index = 3 and upto 2 charachters.
(14) bitset<8>(n).to_string()                                        // to convert a number into string of 8 bits

                                                  ------------------------
                                                 |Iterators and its syntax|
        	                                      ------------------------

(1)vector<int> ::iterator it = v.begin();                               //v is a vector
(2)(*it)      or   (*(it+1))                                           //gives the value to which that iterator points or the next value if it+1 as its just like pointer
(3) for (it = v.begin(); it != v.end(); it++){
	cout << (*it) << endl;                                        //always use it++ instead of it+1 as in map elements are not at continous location so it wont work
}
(4) (*it).first is same as (it->first)                               //in vector of pairs we can use that arrow one or any.
(5) for (auto &val : v) {
	cout << val.first << val.second;
}
                                                  ----------------------
                                                 |Vector and its syntax:|
                                                  ----------------------

vector functions in C++ are
(a) int index = findpos(v, <character element to be founded>)           //returns the index of that character value if present in vector else -1  ###########################
(1)v.erase(v.begin() + index);                                          //in place of index write index of element to be removed.
(2)posmax = max_element(v.begin(),v.end())-v.begin();                   //gives index of maximum valued element in vector v 
(3)v.pop_back()
(4)v.push_back()
(5)int n = count(v.begin(), v.end(), element)                           //gives the count of the value in vector v
(6)sort(v.begin(), v.end());                                            //will sort the vector in ascending order
(7)vector<int> v(n, x);                                                 //will make a vector named v with n elements all equals to x
(8)int sum = accumulate(v.begin(), v.end(), 0ll);
(9) By letting std::prev_permutation(std::begin(P), std::end(P)), the lexicogfically largest permutation of P smaller than P is stored in P.
                                                  
 						              --------------------
                                                 |Pair and its syntax:|
                                                  --------------------

(1) pair<int, int> p;                //declaraing the pair
(2) p = {1, 2}                      //assiging the value
(3) p = make_pair(1, 2);	   //same as above
(4) p.first, p.second             //to access the pair elements, can also use it with cin and cout

                                                  -------------------
                                                 |Map and its syntax:|
                                                  -------------------

1)map<int, int> m;     //ordered map and unique key as well as in ascending order will be stored.

2)m = {{key1, value1}, {key2, value2}}    //syntax of map

3)m[key] = value1   //giving value (Time complexity is log(n), if you just write m[key1] then it will store a default value 0 if int and empty string if string, so use it carefully).
	
4) using loop for parsing :
for (auto &pr : m){
	cout << pr.first //key << pr.second //value <<endl;
}

5) using functions in maps :

	a) auto it = m.find(key)                         //returns the iterator if not found then it = m.end()
	b) (*it).first and (*it).second                 //returns the key and value (it === iterator)
	c) m.insert({key, value})                      //will insert if key is unique
	d) m.erase(key)  or  m.erase(it)              //will erase key and its value  (key should be present and it should not be m.end())
	e) m.size                                    //returns number of pairs
	
6) unordered_map<string, int> um;                   //time complexity for every operation and function will be O(1) and ascending order will not be maintained but unique key will be there
                                                   //you cannot declare pair of complex data type such as vector in unordered_map

                                                  -------------------
                                                 |set and its syntax:|
                                                  -------------------

1) set<int> s;                 //stores unique value and in sorted order (ascending)
2) s.insert(2);               // insert value in the set and no complex data types
3) auto it = s.find(3)       //returns the iterator of the value if present in set and if not then s.end() will be returned
4) s.erase(it) or s.erase(value)  //removes the value from the set
5) unordered_set<int> us;   //all like unordered_map differences i.e. no sorted order
6) multiset<int> ms;       //can store multiple values i.e. no unique value is good here and rest same as set
7) ms.find(value)         //will return the iterator of first occurence of that value  (Time complexity : O( log N ))
8) ms.erase(value)  or ms.erase(it)  //removes all occurences of the value from the set
9) int K = ms.count(value)          //gives the count of the value, Time complexity is O(K + log(N))
10) s.count(value)                 //Time complexity is O(log(N))
11) us.count(value)               //Time complexity is O(1)

								 ------------------------------
								| priority_queue and its syntax|
								 ------------------------------

1) priority_queue<int> pq;      //by default max heap that is in descending order
2) pq.push(2);                  //adds element in pq in                                            O(log(n))
3) pq.pop();                    //deletes first element that is the top element                    O(log(n))
4) pq.top();                    //will give you the first element as here you cannot access any other value than top in O(1)
5) pq.size()                   //returns the size of pq in                      O(1)
6) pq.empty()                  //if pq is empty than returns true else false in O(1)
7)                    printing priority queue;
  while(!p.empty()) {
	cout<<pq.top()<<" ";
	pq.pop();
  }                                                                        //after printing you will loose your pq
8) priority_queue<int,vector<int>,greater<int>> min_pq;                   //min heap priority queue, contains element in ascending order

--------policy based data structure-------------

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<long long int, null_type, less_equal<long long int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_multiset;
#define ms.erase(n) ms.erase(ms.find_by_order(ms.order_of_key(n)));

1. ms.find_by_order(i) // to get value at ith index

9) Linked list function to convert vector into linked list and pass the head node of that linked list (for Leetcode):

ListNode* vectorToLinkedList(const std::vector<int>& vec) {
        if (vec.empty()) {
            return nullptr;
        }
        ListNode* head = new ListNode(vec[0]);
        ListNode* current = head;
        for (int i = 1; i < vec.size(); ++i) {
            current->next = new ListNode(vec[i]);
            current = current->next;
        }
        return head;
    }

# Rotating a matrix(v) by 90 dgrees:
vector<vector<char>> rv=v;
        for(int i=0; i<n/2; i++){
            int j=n-1-i;
            while(j>=0) {
                rv[i][n-1-j] = v[j][i];
                j--;
            }
            j = 1;
            while(j<n){
                rv[j][n-1-i]=v[i][j];
                j++;
            }
            j = 1;
            while(j<n){
                rv[n-1-i][n-1-j]=v[j][n-1-i];
                j++;
            }
            j=1;
            while(j<n){
                rv[n-1-j][i]=v[n-1-i][n-1-j];
                j++;
            }
        }
                                                    -----
                                                   | DSU |
                                                    -----
class dsu{
    public:
    vector<int> parent;
    vector<int> size;
    dsu(int n, bool include){ // if 0 is included and will make all the vertices from 0-n or 1-n
        for(int i=0; i<=n; i++) parent.append(i);
        for(int i=0; i<n+1; i++) size.append(1);
    }
    void make(int v){
        this->parent[v] = v;
        this->size[v] = 1;
    }
    int find(int v){
        if (v == this->parent[v]) return v;
        this->parent[v] = find(this->parent[v]);
    }
    void Union(int a, int b){
        a = find(a);
        b = find(b);
        if (a!=b){
            if (size[a] < size[b]) swap(a, b);
            this->parent[b] = a;
            this->size[a] += this->size[b];
        }
    }
    int getSize(int v){
        int par=find(v);
        return size[par];
    }
}; 

// Check if it is cyclic or not like 3 2 1, you start from 1 and go to left and you get 1 2 3, 2nd 1 1 2 1 1, you start from 1 and go to right 1 1 and start from 0 index 1 1 1 1 2 u get sorted array, just bruteforce way of checking it and returning the minimum number of operations to make the array sorted

#include <bits/stdc++.h>
using namespace std;
#define append push_back
int getans(vector<int> v, int n, int j){
    int index = j;
    vector<int> temp;
    vector<int> temp2;
    if (j==0){
        while(j<n){
            temp.append(v[j]);
            j++;
        }
        j=index;
        temp2.append(v[j]); j=n-1;
        while(j>0){
            temp2.append(v[j]);
            j--;
        }
    }
    else if (j==n-1){
        while(j>=0){
            temp.append(v[j]);
            j--;
        }
        j=index;
        temp2.append(v[j]); j=0;
        while(j<n-1){
            temp2.append(v[j]);
            j++;
        }
        
    }
    else{
        temp2.append(v[j]);
        temp.append(v[j]); int i=j;
        
        j++;
        while(j<n){
            temp.append(v[j]);
            j++;
        }
        
        j=0;
        while(j<i){
            temp.append(v[j]);
            j++; 
        }
        
        j=i-1;
        while(j>=0){
            temp2.append(v[j]);
            j--;
        } 
        
        j=n-1;
        while(j>i){
            temp2.append(v[j]);
            j--;
        }
    }
    if (is_sorted(temp.begin(), temp.end())){
        return n-index;
    }
    else if (is_sorted(temp2.begin(), temp2.end())){
        return n-index;
    }
    else return -1;
}
signed main(){
    int t; cin >> t;
    while(t--){
        int n; cin >> n;
        vector<int> v(n);
        for(auto &val: v) cin >> val;
        vector<int> a=v;
        reverse(a.begin(), a.end());
        if (is_sorted(v.begin(), v.end())) {cout<<0<<endl; continue;}
        if (is_sorted(a.begin(), a.end())) {cout<<1<<endl; continue;}
        int m = *min_element(v.begin(), v.end()); int j=-1;
        for(int i=0; i<n-1; i++){
            if (v[i]==m and v[i+1]!=m) {j=i; break;}
        }
        if (j==-1) j=n-1;
        int j2=-1;
        for(int i=n-1; i>0; i--){
            if (v[i]==m and v[i-1]!=m) {j2=i; break;}
        }
        if (j2==-1) j2=0;
        int ans1 = getans(v, n, j);
        int ans2 = getans(v, n, j2);
        j=-1;
        for(int i=0; i<n-1; i++){
            if (a[i]==m and a[i+1]!=m) {j=i; break;}
        }
        if (j==-1) j=n-1;
        j2=-1;
        for(int i=n-1; i>0; i--){
            if (a[i]==m and a[i-1]!=m) {j2=i; break;}
        }
        if (j2==-1) j2=0;
        int ans3 = getans(a, n, j); 
        int ans4 = getans(a, n, j2);
        vector<int> c;
        c.append(ans1); c.append(ans2); 
        if (ans3!=-1) c.append(ans3+1); 
        if (ans4!=-1) c.append(ans4+1);
        sort(c.begin(), c.end()); bool ok=false;
        for(auto val: c) {if (val!=-1) {cout<<val<<endl; ok=true; break;}}
        if (!ok) cout<<-1<<endl;
    }
    return 0;
}
